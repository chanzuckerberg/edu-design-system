/**
 * Flowtype definitions for Checkbox
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.15.0
 */

import React from "react";
declare type CheckboxHTMLElementProps = $Diff<
  React.InputHTMLAttributes<HTMLInputElement>,
  { checked: any, id: any, size: any }
>;
declare type InputProps = {|
  ...CheckboxHTMLElementProps,
  ...{|
    /**
     * Whether checkbox is checked. Defaults to false.
     * "indeterminate" can be used when a checkbox visually represents
     * a list of checkboxes that is "partially" checked.
     */
    checked?: boolean | "indeterminate",

    /**
     * Additional classnames passed in for styling.
     */
    className?: string,

    /**
     * Checkbox ID. Used to connect the input with a label for accessibility purposes.
     */
    id: string,
  |},
|};
declare type LabelProps = {|
  /**
   * Text to render in label.
   */
  children: Node,

  /**
   * Additional classnames passed in for styling.
   */
  className?: string,

  /**
   * ID of input that label is associated with.
   */
  htmlFor: string,

  /**
   * Size of the checkbox label.
   */
  size?: "small" | "medium",
|};
export type CheckboxProps = {|
  ...$Diff<InputProps, { id: any }>,
  ...{|
    /**
     * HTML id attribute. If not passed, this component
     * will generate an id to use for accessibility.
     */
    id?: string,

    /**
     * Visible text label for the checkbox.
     */
    label?: Node,

    /**
     * Size of the checkbox label.
     */
    size?: $PropertyType<LabelProps, "size">,
  |},
|};
/**
 * Checkbox input element, exported for greater flexibility.
 * You must provide an `id` prop and connect it to a visible label.
 */
declare export var CheckboxInput: React.ForwardRefExoticComponent<{|
  ...CheckboxHTMLElementProps,
  ...{|
    /**
     * Whether checkbox is checked. Defaults to false.
     * "indeterminate" can be used when a checkbox visually represents
     * a list of checkboxes that is "partially" checked.
     */
    checked?: boolean | "indeterminate" | void,

    /**
     * Additional classnames passed in for styling.
     */
    className?: string | void,

    /**
     * Checkbox ID. Used to connect the input with a label for accessibility purposes.
     */
    id: string,
  |},
  ...React.RefAttributes<HTMLInputElement>,
|}>;
/**
 * Label element, exported for greater flexibility. Can be used with any form input.
 */
declare export var Label: (x: LabelProps) => Node;
/**
 * Checkbox control indicating if something is selected or unselected.
 *
 * Requires either a visible label or an accessible name.
 */
declare var Checkbox: React.ForwardRefExoticComponent<{|
  ...$Diff<InputProps, { id: any }>,
  ...{|
    /**
     * HTML id attribute. If not passed, this component
     * will generate an id to use for accessibility.
     */
    id?: string | void,

    /**
     * Visible text label for the checkbox.
     */
    label?: Node,

    /**
     * Size of the checkbox label.
     */
    size?: $PropertyType<LabelProps, "size">,
  |},
  ...React.RefAttributes<HTMLInputElement>,
|}>;
declare module.exports: typeof Checkbox;
